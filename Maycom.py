import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class MayotteCommuneFinanceAnalyzer:
    def __init__(self, commune_name):
        self.commune = commune_name
        self.colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#F9A602', '#6A0572', 
                      '#AB83A1', '#5CAB7D', '#2A9D8F', '#E76F51', '#264653']
        
        self.start_year = 2002
        self.end_year = 2025
        
        # Configuration sp√©cifique √† chaque commune
        self.config = self._get_commune_config()
        
    def _get_commune_config(self):
        """Retourne la configuration sp√©cifique pour chaque commune mahoraise"""
        configs = {
            "Mamoudzou": {
                "population_base": 71000,
                "budget_base": 85,
                "type": "urbaine",
                "specialites": ["administration", "commerce", "sante", "education", "port"]
            },
            "Koungou": {
                "population_base": 35000,
                "budget_base": 65,
                "type": "periurbaine",
                "specialites": ["commerce", "zones_activites", "services", "agriculture_urbaine"]
            },
            "Dzaoudzi": {
                "population_base": 18000,
                "budget_base": 50,
                "type": "urbaine",
                "specialites": ["administration", "port", "tourisme", "histoire"]
            },
            "Sada": {
                "population_base": 12000,
                "budget_base": 40,
                "type": "rurale",
                "specialites": ["agriculture", "elevage", "artisanat", "culture"]
            },
            "Bandr√©l√©": {
                "population_base": 10000,
                "budget_base": 35,
                "type": "cotiere",
                "specialites": ["peche", "tourisme", "agriculture", "plages"]
            },
            "Pamandzi": {
                "population_base": 11000,
                "budget_base": 38,
                "type": "urbaine",
                "specialites": ["aeroport", "administration", "services", "commerce"]
            },
            "Bou√©ni": {
                "population_base": 6000,
                "budget_base": 30,
                "type": "rurale",
                "specialites": ["agriculture", "peche", "tourisme_vert", "artisanat"]
            },
            "Chiconi": {
                "population_base": 8000,
                "budget_base": 32,
                "type": "rurale",
                "specialites": ["agriculture", "commerce", "services_locaux", "culture"]
            },
            "Tsingoni": {
                "population_base": 15000,
                "budget_base": 45,
                "type": "periurbaine",
                "specialites": ["agriculture", "commerce", "tourisme", "histoire"]
            },
            # Configuration par d√©faut pour les autres communes
            "default": {
                "population_base": 7000,
                "budget_base": 28,
                "type": "rurale",
                "specialites": ["agriculture", "peche", "petit_commerce", "services_locaux"]
            }
        }
        
        return configs.get(self.commune, configs["default"])
    
    def generate_financial_data(self):
        """G√©n√®re des donn√©es financi√®res pour la commune"""
        print(f"üèõÔ∏è G√©n√©ration des donn√©es financi√®res pour {self.commune}...")
        
        # Cr√©er une base de donn√©es annuelle
        dates = pd.date_range(start=f'{self.start_year}-01-01', 
                             end=f'{self.end_year}-12-31', freq='Y')
        
        data = {'Annee': [date.year for date in dates]}
        
        # Donn√©es d√©mographiques (croissance tr√®s forte √† Mayotte)
        data['Population'] = self._simulate_population(dates)
        data['Menages'] = self._simulate_households(dates)
        
        # Recettes communales
        data['Recettes_Totales'] = self._simulate_total_revenue(dates)
        data['Impots_Locaux'] = self._simulate_tax_revenue(dates)
        data['Dotations_Etat'] = self._simulate_state_grants(dates)
        data['Autres_Recettes'] = self._simulate_other_revenue(dates)
        
        # D√©penses communales
        data['Depenses_Totales'] = self._simulate_total_expenses(dates)
        data['Fonctionnement'] = self._simulate_operating_expenses(dates)
        data['Investissement'] = self._simulate_investment_expenses(dates)
        data['Charge_Dette'] = self._simulate_debt_charges(dates)
        data['Personnel'] = self._simulate_staff_costs(dates)
        
        # Indicateurs financiers
        data['Epargne_Brute'] = self._simulate_gross_savings(dates)
        data['Dette_Totale'] = self._simulate_total_debt(dates)
        data['Taux_Endettement'] = self._simulate_debt_ratio(dates)
        data['Taux_Fiscalite'] = self._simulate_tax_rate(dates)
        
        # Investissements sp√©cifiques adapt√©s √† Mayotte
        data['Investissement_Agriculture'] = self._simulate_agriculture_investment(dates)
        data['Investissement_Peche'] = self._simulate_fishing_investment(dates)
        data['Investissement_Transport'] = self._simulate_transport_investment(dates)
        data['Investissement_Education'] = self._simulate_education_investment(dates)
        data['Investissement_Sante'] = self._simulate_health_investment(dates)
        data['Investissement_Environnement'] = self._simulate_environment_investment(dates)
        
        df = pd.DataFrame(data)
        
        # Ajouter des tendances sp√©cifiques √† la commune mahoraise
        self._add_municipal_trends(df)
        
        return df
    
    def _simulate_population(self, dates):
        """Simule la population de la commune (croissance tr√®s forte √† Mayotte)"""
        base_population = self.config["population_base"]
        
        population = []
        for i, date in enumerate(dates):
            # Croissance d√©mographique tr√®s forte √† Mayotte
            if self.config["type"] == "urbaine":
                growth_rate = 0.045  # Croissance urbaine tr√®s forte
            elif self.config["type"] == "periurbaine":
                growth_rate = 0.048  # Croissance p√©riurbaine encore plus forte
            else:  # rurale
                growth_rate = 0.042  # Croissance rurale tr√®s forte
                
            growth = 1 + growth_rate * i
            population.append(base_population * growth)
        
        return population
    
    def _simulate_households(self, dates):
        """Simule le nombre de m√©nages"""
        base_households = self.config["population_base"] / 3.5  # Taille des m√©nages plus grande
        
        households = []
        for i, date in enumerate(dates):
            growth = 1 + 0.038 * i  # Croissance tr√®s forte
            households.append(base_households * growth)
        
        return households
    
    def _simulate_total_revenue(self, dates):
        """Simule les recettes totales de la commune"""
        base_revenue = self.config["budget_base"]
        
        revenue = []
        for i, date in enumerate(dates):
            # Croissance variable selon le type de commune
            if self.config["type"] == "urbaine":
                growth_rate = 0.055  # Croissance tr√®s forte √† Mayotte
            elif self.config["type"] == "periurbaine":
                growth_rate = 0.058  # Croissance encore plus forte
            else:  # rurale
                growth_rate = 0.048  # Croissance rurale forte
                
            growth = 1 + growth_rate * i
            noise = np.random.normal(1, 0.09)  # Plus de volatilit√©
            revenue.append(base_revenue * growth * noise)
        
        return revenue
    
    def _simulate_tax_revenue(self, dates):
        """Simule les recettes fiscales"""
        base_tax = self.config["budget_base"] * 0.30  # Part plus faible des imp√¥ts locaux
        
        tax_revenue = []
        for i, date in enumerate(dates):
            growth = 1 + 0.035 * i  # Croissance forte
            noise = np.random.normal(1, 0.10)  # Plus de volatilit√©
            tax_revenue.append(base_tax * growth * noise)
        
        return tax_revenue
    
    def _simulate_state_grants(self, dates):
        """Simule les dotations de l'√âtat (tr√®s importantes √† Mayotte)"""
        base_grants = self.config["budget_base"] * 0.55  # Part tr√®s importante des dotations
        
        grants = []
        for i, date in enumerate(dates):
            year = date.year
            # Augmentation tr√®s forte des dotations apr√®s la d√©partementalisation
            if year >= 2011:  # D√©partementalisation de Mayotte
                increase = 1 + 0.018 * (year - 2011)
            else:
                increase = 1
            
            noise = np.random.normal(1, 0.07)
            grants.append(base_grants * increase * noise)
        
        return grants
    
    def _simulate_other_revenue(self, dates):
        """Simule les autres recettes"""
        base_other = self.config["budget_base"] * 0.15  # Part plus faible
        
        other_revenue = []
        for i, date in enumerate(dates):
            growth = 1 + 0.032 * i
            noise = np.random.normal(1, 0.12)  # Plus de volatilit√©
            other_revenue.append(base_other * growth * noise)
        
        return other_revenue
    
    def _simulate_total_expenses(self, dates):
        """Simule les d√©penses totales"""
        base_expenses = self.config["budget_base"] * 0.98  # D√©penses tr√®s proches des recettes
        
        expenses = []
        for i, date in enumerate(dates):
            growth = 1 + 0.048 * i  # Croissance tr√®s forte
            noise = np.random.normal(1, 0.08)
            expenses.append(base_expenses * growth * noise)
        
        return expenses
    
    def _simulate_operating_expenses(self, dates):
        """Simule les d√©penses de fonctionnement"""
        base_operating = self.config["budget_base"] * 0.68  # Part tr√®s importante du fonctionnement
        
        operating = []
        for i, date in enumerate(dates):
            growth = 1 + 0.045 * i  # Croissance tr√®s forte
            noise = np.random.normal(1, 0.07)
            operating.append(base_operating * growth * noise)
        
        return operating
    
    def _simulate_investment_expenses(self, dates):
        """Simule les d√©penses d'investissement"""
        base_investment = self.config["budget_base"] * 0.30  # Part plus faible
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            # Plans d'investissement importants apr√®s la d√©partementalisation
            if year in [2012, 2015, 2019, 2023]:
                multiplier = 1.9
            elif year in [2009, 2014, 2021]:
                multiplier = 0.8
            else:
                multiplier = 1.0
            
            growth = 1 + 0.035 * i
            noise = np.random.normal(1, 0.20)  # Plus de volatilit√©
            investment.append(base_investment * growth * multiplier * noise)
        
        return investment
    
    def _simulate_debt_charges(self, dates):
        """Simule les charges de la dette"""
        base_debt_charge = self.config["budget_base"] * 0.08  # Charges de dette plus importantes
        
        debt_charges = []
        for i, date in enumerate(dates):
            year = date.year
            if year >= 2011:
                increase = 1 + 0.012 * (year - 2011)  # Augmentation plus forte apr√®s d√©partementalisation
            else:
                increase = 1
            
            noise = np.random.normal(1, 0.13)  # Plus de volatilit√©
            debt_charges.append(base_debt_charge * increase * noise)
        
        return debt_charges
    
    def _simulate_staff_costs(self, dates):
        """Simule les d√©penses de personnel"""
        base_staff = self.config["budget_base"] * 0.48  # Part tr√®s importante du personnel
        
        staff_costs = []
        for i, date in enumerate(dates):
            growth = 1 + 0.042 * i  # Croissance tr√®s forte
            noise = np.random.normal(1, 0.06)
            staff_costs.append(base_staff * growth * noise)
        
        return staff_costs
    
    def _simulate_gross_savings(self, dates):
        """Simule l'√©pargne brute"""
        savings = []
        for i, date in enumerate(dates):
            base_saving = self.config["budget_base"] * 0.02  # √âpargne tr√®s faible
            
            year = date.year
            if year >= 2011:
                improvement = 1 + 0.006 * (year - 2011)  # Am√©lioration tr√®s lente
            else:
                improvement = 1
            
            noise = np.random.normal(1, 0.18)  # Plus de volatilit√©
            savings.append(base_saving * improvement * noise)
        
        return savings
    
    def _simulate_total_debt(self, dates):
        """Simule la dette totale"""
        base_debt = self.config["budget_base"] * 0.90  # Dette tr√®s importante
        
        debt = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2012, 2015, 2019, 2023]:
                change = 1.3  # Augmentation tr√®s forte
            elif year in [2009, 2014, 2021]:
                change = 0.95  # R√©duction plus faible
            else:
                change = 1.0
            
            noise = np.random.normal(1, 0.12)  # Plus de volatilit√©
            debt.append(base_debt * change * noise)
        
        return debt
    
    def _simulate_debt_ratio(self, dates):
        """Simule le taux d'endettement"""
        ratios = []
        for i, date in enumerate(dates):
            base_ratio = 0.82  # Endettement initial tr√®s √©lev√©
            
            year = date.year
            if year >= 2011:
                improvement = 1 - 0.008 * (year - 2011)  # Am√©lioration tr√®s lente
            else:
                improvement = 1
            
            noise = np.random.normal(1, 0.09)
            ratios.append(base_ratio * improvement * noise)
        
        return ratios
    
    def _simulate_tax_rate(self, dates):
        """Simule le taux de fiscalit√© (moyen)"""
        rates = []
        for i, date in enumerate(dates):
            base_rate = 0.75  # Fiscalit√© initiale tr√®s faible
            
            year = date.year
            if year >= 2011:
                increase = 1 + 0.006 * (year - 2011)  # Augmentation tr√®s lente
            else:
                increase = 1
            
            noise = np.random.normal(1, 0.05)
            rates.append(base_rate * increase * noise)
        
        return rates
    
    def _simulate_agriculture_investment(self, dates):
        """Simule l'investissement agricole"""
        base_investment = self.config["budget_base"] * 0.07  # Part plus importante
        
        # Ajustement selon les sp√©cialit√©s
        multiplier = 1.4 if "agriculture" in self.config["specialites"] else 0.9
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2005, 2010, 2015, 2020]:
                year_multiplier = 2.1  # Plans d'investissement tr√®s importants
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.038 * i  # Croissance tr√®s forte
            noise = np.random.normal(1, 0.18)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_fishing_investment(self, dates):
        """Simule l'investissement dans la p√™che (sp√©cifique √† Mayotte)"""
        base_investment = self.config["budget_base"] * 0.06
        
        # Ajustement selon les sp√©cialit√©s
        multiplier = 1.7 if "peche" in self.config["specialites"] else 0.8
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2007, 2013, 2019, 2024]:
                year_multiplier = 2.0
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.04 * i  # Croissance tr√®s forte
            noise = np.random.normal(1, 0.20)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_transport_investment(self, dates):
        """Simule l'investissement en transport"""
        base_investment = self.config["budget_base"] * 0.05
        
        # Ajustement selon les sp√©cialit√©s
        multiplier = 1.5 if "transport" in self.config["specialites"] else 1.0
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2006, 2012, 2018, 2023]:
                year_multiplier = 1.9
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.035 * i
            noise = np.random.normal(1, 0.19)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_education_investment(self, dates):
        """Simule l'investissement √©ducatif"""
        base_investment = self.config["budget_base"] * 0.06  # Part plus importante
        
        # Ajustement selon les sp√©cialit√©s
        multiplier = 1.5 if "education" in self.config["specialites"] else 1.0
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2008, 2014, 2020]:
                year_multiplier = 1.8
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.036 * i
            noise = np.random.normal(1, 0.22)  # Plus de volatilit√©
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_health_investment(self, dates):
        """Simule l'investissement en sant√© (sp√©cifique √† Mayotte)"""
        base_investment = self.config["budget_base"] * 0.05
        
        # Ajustement selon les sp√©cialit√©s
        multiplier = 1.6 if "sante" in self.config["specialites"] else 0.9
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2009, 2015, 2021]:
                year_multiplier = 2.1  # Plans tr√®s importants pour la sant√©
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.038 * i
            noise = np.random.normal(1, 0.21)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_environment_investment(self, dates):
        """Simule l'investissement environnemental"""
        base_investment = self.config["budget_base"] * 0.04  # Part plus importante
        
        # Ajustement selon les sp√©cialit√©s
        multiplier = 1.6 if "environnement" in self.config["specialites"] else 0.9
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2009, 2015, 2021]:
                year_multiplier = 2.2  # Plans tr√®s importants pour l'environnement
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.04 * i
            noise = np.random.normal(1, 0.23)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _add_municipal_trends(self, df):
        """Ajoute des tendances municipales r√©alistes adapt√©es √† Mayotte"""
        for i, row in df.iterrows():
            year = row['Annee']
            
            # D√©veloppement initial (2002-2005)
            if 2002 <= year <= 2005:
                df.loc[i, 'Investissement_Agriculture'] *= 1.6
                df.loc[i, 'Investissement_Peche'] *= 1.5
            
            # Pr√©paration √† la d√©partementalisation (2006-2010)
            if 2006 <= year <= 2010:
                df.loc[i, 'Dotations_Etat'] *= 1.25
                df.loc[i, 'Investissement'] *= 1.3
            
            # D√©partementalisation de Mayotte (2011)
            if year == 2011:
                df.loc[i, 'Dotations_Etat'] *= 1.8  # Forte augmentation des dotations
                df.loc[i, 'Investissement_Education'] *= 1.6
                df.loc[i, 'Investissement_Sante'] *= 1.7
            
            # D√©veloppement post-d√©partementalisation (2012-2015)
            elif 2012 <= year <= 2015:
                df.loc[i, 'Investissement_Transport'] *= 1.5
                df.loc[i, 'Investissement_Environnement'] *= 1.4
            
            # Impact de la crise COVID-19 (2020-2021)
            if 2020 <= year <= 2021:
                if year == 2020:
                    # Baisse des recettes mais soutien de l'√âtat
                    df.loc[i, 'Autres_Recettes'] *= 0.68
                    df.loc[i, 'Dotations_Etat'] *= 1.25
            
            # Plan de relance post-COVID sp√©cifique √† Mayotte (2022-2025)
            if year >= 2022:
                df.loc[i, 'Investissement'] *= 1.18
                df.loc[i, 'Investissement_Sante'] *= 1.22
                df.loc[i, 'Investissement_Agriculture'] *= 1.15
    
    def create_financial_analysis(self, df):
        """Cr√©e une analyse compl√®te des finances communales"""
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 24))
        
        # 1. √âvolution des recettes et d√©penses
        ax1 = plt.subplot(4, 2, 1)
        self._plot_revenue_expenses(df, ax1)
        
        # 2. Structure des recettes
        ax2 = plt.subplot(4, 2, 2)
        self._plot_revenue_structure(df, ax2)
        
        # 3. Structure des d√©penses
        ax3 = plt.subplot(4, 2, 3)
        self._plot_expenses_structure(df, ax3)
        
        # 4. Investissements communaux
        ax4 = plt.subplot(4, 2, 4)
        self._plot_investments(df, ax4)
        
        # 5. Dette et endettement
        ax5 = plt.subplot(4, 2, 5)
        self._plot_debt(df, ax5)
        
        # 6. Indicateurs de performance
        ax6 = plt.subplot(4, 2, 6)
        self._plot_performance_indicators(df, ax6)
        
        # 7. D√©mographie
        ax7 = plt.subplot(4, 2, 7)
        self._plot_demography(df, ax7)
        
        # 8. Investissements sectoriels
        ax8 = plt.subplot(4, 2, 8)
        self._plot_sectorial_investments(df, ax8)
        
        plt.suptitle(f'Analyse des Comptes Communaux de {self.commune} - Mayotte ({self.start_year}-{self.end_year})', 
                    fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig(f'{self.commune}_financial_analysis.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # G√©n√©rer les insights
        self._generate_financial_insights(df)
    
    def _plot_revenue_expenses(self, df, ax):
        """Plot de l'√©volution des recettes et d√©penses"""
        ax.plot(df['Annee'], df['Recettes_Totales'], label='Recettes Totales', 
               linewidth=2, color='#2A9D8F', alpha=0.8)
        ax.plot(df['Annee'], df['Depenses_Totales'], label='D√©penses Totales', 
               linewidth=2, color='#E76F51', alpha=0.8)
        
        ax.set_title('√âvolution des Recettes et D√©penses (M‚Ç¨)', 
                    fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_revenue_structure(self, df, ax):
        """Plot de la structure des recettes"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Impots_Locaux', 'Dotations_Etat', 'Autres_Recettes']
        colors = ['#264653', '#2A9D8F', '#E76F51']
        labels = ['Imp√¥ts Locaux', 'Dotations √âtat', 'Autres Recettes']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Structure des Recettes (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_expenses_structure(self, df, ax):
        """Plot de la structure des d√©penses"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Fonctionnement', 'Investissement', 'Charge_Dette', 'Personnel']
        colors = ['#264653', '#2A9D8F', '#E76F51', '#F9A602']
        labels = ['Fonctionnement', 'Investissement', 'Charge Dette', 'Personnel']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Structure des D√©penses (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_investments(self, df, ax):
        """Plot des investissements communaux"""
        ax.plot(df['Annee'], df['Investissement_Agriculture'], label='Agriculture', 
               linewidth=2, color='#264653', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Peche'], label='P√™che', 
               linewidth=2, color='#2A9D8F', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Transport'], label='Transport', 
               linewidth=2, color='#E76F51', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Education'], label='√âducation', 
               linewidth=2, color='#F9A602', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Sante'], label='Sant√©', 
               linewidth=2, color='#6A0572', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Environnement'], label='Environnement', 
               linewidth=2, color='#45B7D1', alpha=0.8)
        
        ax.set_title('R√©partition des Investissements (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_debt(self, df, ax):
        """Plot de la dette et du taux d'endettement"""
        # Dette totale
        ax.bar(df['Annee'], df['Dette_Totale'], label='Dette Totale (M‚Ç¨)', 
              color='#264653', alpha=0.7)
        
        ax.set_title('Dette Communale et Taux d\'Endettement', fontsize=12, fontweight='bold')
        ax.set_ylabel('Dette (M‚Ç¨)', color='#264653')
        ax.tick_params(axis='y', labelcolor='#264653')
        ax.grid(True, alpha=0.3, axis='y')
        
        # Taux d'endettement en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Taux_Endettement'], label='Taux d\'Endettement', 
                linewidth=3, color='#E76F51')
        ax2.set_ylabel('Taux d\'Endettement', color='#E76F51')
        ax2.tick_params(axis='y', labelcolor='#E76F51')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_performance_indicators(self, df, ax):
        """Plot des indicateurs de performance"""
        # √âpargne brute
        ax.bar(df['Annee'], df['Epargne_Brute'], label='√âpargne Brute (M‚Ç¨)', 
              color='#2A9D8F', alpha=0.7)
        
        ax.set_title('Indicateurs de Performance', fontsize=12, fontweight='bold')
        ax.set_ylabel('√âpargne Brute (M‚Ç¨)', color='#2A9D8F')
        ax.tick_params(axis='y', labelcolor='#2A9D8F')
        ax.grid(True, alpha=0.3, axis='y')
        
        # Taux de fiscalit√© en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Taux_Fiscalite'], label='Taux de Fiscalit√©', 
                linewidth=3, color='#F9A602')
        ax2.set_ylabel('Taux de Fiscalit√©', color='#F9A602')
        ax2.tick_params(axis='y', labelcolor='#F9A602')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_demography(self, df, ax):
        """Plot de l'√©volution d√©mographique"""
        ax.plot(df['Annee'], df['Population'], label='Population', 
               linewidth=2, color='#264653', alpha=0.8)
        
        ax.set_title('√âvolution D√©mographique', fontsize=12, fontweight='bold')
        ax.set_ylabel('Population', color='#264653')
        ax.tick_params(axis='y', labelcolor='#264653')
        ax.grid(True, alpha=0.3)
        
        # Nombre de m√©nages en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Menages'], label='M√©nages', 
                linewidth=2, color='#E76F51', alpha=0.8)
        ax2.set_ylabel('M√©nages', color='#E76F51')
        ax2.tick_params(axis='y', labelcolor='#E76F51')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_sectorial_investments(self, df, ax):
        """Plot des investissements sectoriels"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Investissement_Agriculture', 'Investissement_Peche', 
                     'Investissement_Transport', 'Investissement_Education', 
                     'Investissement_Sante', 'Investissement_Environnement']
        colors = ['#264653', '#2A9D8F', '#E76F51', '#F9A602', '#6A0572', '#45B7D1']
        labels = ['Agriculture', 'P√™che', 'Transport', '√âducation', 'Sant√©', 'Environnement']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('R√©partition Sectorielle des Investissements (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _generate_financial_insights(self, df):
        """G√©n√®re des insights analytiques adapt√©s √† Mayotte"""
        print(f"üèõÔ∏è INSIGHTS ANALYTIQUES - Commune de {self.commune} (Mayotte)")
        print("=" * 60)
        
        # 1. Statistiques de base
        print("\n1. üìà STATISTIQUES G√âN√âRALES:")
        avg_revenue = df['Recettes_Totales'].mean()
        avg_expenses = df['Depenses_Totales'].mean()
        avg_savings = df['Epargne_Brute'].mean()
        avg_debt = df['Dette_Totale'].mean()
        
        print(f"Recettes moyennes annuelles: {avg_revenue:.2f} M‚Ç¨")
        print(f"D√©penses moyennes annuelles: {avg_expenses:.2f} M‚Ç¨")
        print(f"√âpargne brute moyenne: {avg_savings:.2f} M‚Ç¨")
        print(f"Dette moyenne: {avg_debt:.2f} M‚Ç¨")
        
        # 2. Croissance (tr√®s forte √† Mayotte)
        print("\n2. üìä TAUX DE CROISSANCE:")
        revenue_growth = ((df['Recettes_Totales'].iloc[-1] / 
                          df['Recettes_Totales'].iloc[0]) - 1) * 100
        population_growth = ((df['Population'].iloc[-1] / 
                             df['Population'].iloc[0]) - 1) * 100
        
        print(f"Croissance des recettes ({self.start_year}-{self.end_year}): {revenue_growth:.1f}%")
        print(f"Croissance de la population ({self.start_year}-{self.end_year}): {population_growth:.1f}%")
        
        # 3. Structure financi√®re (sp√©cificit√©s mahoraises)
        print("\n3. üìã STRUCTURE FINANCI√àRE:")
        tax_share = (df['Impots_Locaux'].mean() / df['Recettes_Totales'].mean()) * 100
        state_share = (df['Dotations_Etat'].mean() / df['Recettes_Totales'].mean()) * 100
        investment_share = (df['Investissement'].mean() / df['Depenses_Totales'].mean()) * 100
        
        print(f"Part des imp√¥ts locaux dans les recettes: {tax_share:.1f}%")
        print(f"Part des dotations de l'√âtat dans les recettes: {state_share:.1f}%")
        print(f"Part de l'investissement dans les d√©penses: {investment_share:.1f}%")
        
        # 4. Dette et fiscalit√©
        print("\n4. üí∞ ENDETTEMENT ET FISCALIT√â:")
        avg_debt_ratio = df['Taux_Endettement'].mean() * 100
        avg_tax_rate = df['Taux_Fiscalite'].mean()
        last_debt_ratio = df['Taux_Endettement'].iloc[-1] * 100
        
        print(f"Taux d'endettement moyen: {avg_debt_ratio:.1f}%")
        print(f"Taux d'endettement final: {last_debt_ratio:.1f}%")
        print(f"Taux de fiscalit√© moyen: {avg_tax_rate:.2f}")
        
        # 5. Sp√©cificit√©s de la commune mahoraise
        print(f"\n5. üåü SP√âCIFICIT√âS DE {self.commune.upper()} (MAYOTTE):")
        print(f"Type de commune: {self.config['type']}")
        print(f"Sp√©cialit√©s: {', '.join(self.config['specialites'])}")
        
        # 6. √âv√©nements marquants sp√©cifiques √† Mayotte
        print("\n6. üìÖ √âV√âNEMENTS MARQUANTS MAYOTTE:")
        print("‚Ä¢ 2002-2005: D√©veloppement initial et renforcement des infrastructures")
        print("‚Ä¢ 2006-2010: Pr√©paration √† la d√©partementalisation")
        print("‚Ä¢ 2011: D√©partementalisation de Mayotte et augmentation des dotations")
        print("‚Ä¢ 2012-2015: D√©veloppement des services publics et des infrastructures")
        print("‚Ä¢ 2018: Mouvements sociaux et renforcement des investissements")
        print("‚Ä¢ 2020-2021: Impact de la crise COVID-19 et plans de soutien")
        print("‚Ä¢ 2022-2025: Plan de relance post-COVID sp√©cifique √† Mayotte")
        
        # 7. Recommandations adapt√©es √† Mayotte
        print("\n7. üí° RECOMMANDATIONS STRAT√âGIQUES:")
        if "peche" in self.config["specialites"]:
            print("‚Ä¢ Moderniser la p√™che artisanale et d√©velopper l'aquaculture")
            print("‚Ä¢ Valoriser les produits de la p√™che locale")
        if "agriculture" in self.config["specialites"]:
            print("‚Ä¢ D√©velopper l'agriculture vivri√®re et les fili√®res locales")
            print("‚Ä¢ Moderniser les techniques agricoles et l'irrigation")
        if "tourisme" in self.config["specialites"]:
            print("‚Ä¢ D√©velopper l'√©cotourisme et le tourisme responsable")
            print("‚Ä¢ Valoriser les atouts naturels (lagons, plages, biodiversit√©)")
        print("‚Ä¢ Am√©liorer les infrastructures de transport et de mobilit√©")
        print("‚Ä¢ Renforcer les services publics (sant√©, √©ducation, eau)")
        print("‚Ä¢ Lutter contre l'habitat informel et d√©velopper le logement social")
        print("‚Ä¢ Pr√©server l'environnement et la biodiversit√© exceptionnelle")

def main():
    """Fonction principale pour Mayotte"""
    # Liste des communes de Mayotte
    communes = [
        "Dzaoudzi", "Pamandzi", "Mamoudzou", "Dembeni", "Bandr√©l√©", 
        "Kani-K√©li", "Bou√©ni", "Chirongui", "Sada", "Ouangani", 
        "Chiconi", "Tsingoni", "M'Tsangamouji", "Acoua", "Mtsamboro", 
        "Bandraboua", "Koungou"
    ]
    
    print("üèõÔ∏è ANALYSE DES COMPTES COMMUNAUX DE MAYOTTE (2002-2025)")
    print("=" * 60)
    
    # Demander √† l'utilisateur de choisire une commune
    print("Liste des communes disponibles:")
    for i, commune in enumerate(communes, 1):
        print(f"{i}. {commune}")
    
    try:
        choix = int(input("\nChoisissez le num√©ro de la commune √† analyser: "))
        if choix < 1 or choix > len(communes):
            raise ValueError
        commune_selectionnee = communes[choix-1]
    except (ValueError, IndexError):
        print("Choix invalide. S√©lection de Mamoudzou par d√©faut.")
        commune_selectionnee = "Mamoudzou"
    
    # Initialiser l'analyseur
    analyzer = MayotteCommuneFinanceAnalyzer(commune_selectionnee)
    
    # G√©n√©rer les donn√©es
    financial_data = analyzer.generate_financial_data()
    
    # Sauvegarder les donn√©es
    output_file = f'{commune_selectionnee}_financial_data_2002_2025.csv'
    financial_data.to_csv(output_file, index=False)
    print(f"üíæ Donn√©es sauvegard√©es: {output_file}")
    
    # Aper√ßu des donn√©es
    print("\nüëÄ Aper√ßu des donn√©es:")
    print(financial_data[['Annee', 'Population', 'Recettes_Totales', 'Depenses_Totales', 'Dette_Totale']].head())
    
    # Cr√©er l'analyse
    print("\nüìà Cr√©ation de l'analyse financi√®re...")
    analyzer.create_financial_analysis(financial_data)
    
    print(f"\n‚úÖ Analyse des comptes communaux de {commune_selectionnee} termin√©e!")
    print(f"üìä P√©riode: {analyzer.start_year}-{analyzer.end_year}")
    print("üì¶ Donn√©es: D√©mographie, finances, investissements, dette")

if __name__ == "__main__":
    main()